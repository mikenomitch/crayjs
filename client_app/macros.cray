
















let @ = macro {
  rule { ; } => { this; }
  rule { , } => { this, }
  rule { $exp } => { this.$exp }
  rule { } => { this }
}

export @;






















let unless = macro {
  rule {
    ( $predicate:expr ) return $body:expr ;
  } => {
    if (!($predicate)) {
      return $body
    }
  }
  rule {
    ( $predicate:expr ) { $body:expr (;) ... }
  } => {
    if (!($predicate)) {
      $body ...
    }
  }
  rule infix {
    return $wtvr:expr | $condition:expr ;
  } => {
    if (!($condition)) return $wtvr
  }
  rule infix {
    $body:expr | $condition:expr ;
  } => {
    $body unless $condition
  }
  rule infix {
    $body:expr | $condition:expr
  } => {
    if (!($condition)) {
      $body
    }
  }
}

export unless;




















operator == 9 left { $l, $r } => #{ $l === $r }

export ==;






let var = macro {
  rule { [$var (,) ...] = $obj:expr } => {
    var i = 0;
    var arr = $obj;
    $(var $var = arr[i++]) (;) ...
  }

  rule { $id } => {
    var $id
  }
}

export var;









let lam = macro {
  case {$lambda ($body ... $last:expr) } => {
    var ctx = #{$lambda};

    var stx = resolvePlaceholders(#{
      $body ...
      return $last
    }, ctx);

    return [
      makeKeyword('function', ctx),
      makeDelim('()', stx.args, ctx),
      makeDelim('{}', stx.body, ctx)
    ];

    function resolvePlaceholders(stx, ctx){
      var argsReferenced = [];

      var body = createIdentifiers(stx);
      var amountOfArgs = argsReferenced.sort(function(x, y){return +x > +y})[argsReferenced.length - 1];
      var args = buildArgumentIdentifiers(amountOfArgs, ctx);

      return {args: args, body: body}

      function createIdentifiers(stx) {
        return stx.reduce(function(stxList, s){
          if (s.token.type === parser.Token.Identifier && /^_[1-9]{1}$/.test(s.token.value)) {
            var idx = s.token.value.charAt(1);
            var ident = makeIdent('_' + idx, ctx);
            argsReferenced.push(idx);
            return stxList.concat(ident);
          }
          if (s.token.type === parser.Token.Delimiter) {
            s.expose();
            s.token.inner = createIdentifiers(s.token.inner);
          }
          return stxList.concat(s);
        }, []);
      }

      function buildArgumentIdentifiers(amount, ctx){
        var stx = [], i;

        for(i = 0; i < amount; i++) {
          stx.push(makeIdent("_" + (i + 1), ctx));
          if (!(i + 1 >= amount)) {
            stx.push(makePunc(",", ctx));
          }
        }
        return stx;
      }
    }
  }
  case {_ ()} => {return #{function(){}}}
  case {_} => {return #{function(){}}}
}

export lam;
























operator (|>) 14 left { $lhs, $rhs } => #{ thread $lhs $rhs }
export (|>);

macro thread {
  rule { $lhs ($method:part()) } => {
    $method($lhs)
  }
  rule { $lhs ($method:part($args:expr (,) ...)) } => {
    $method($args (,) ..., $lhs)
  }
  case { _ _ ($tok ...) } => {
    throwSyntaxError('|>', 'Expected function call', #{ $tok ... })
  }
}
// We can be a little loose with our parsing since `operator` guarantees
// that we have a fully expanded, valid expression.
macro part {
  rule { ($e ...) . $next:part }
  rule { ($e ...) }
  rule { $name:ident[$e ...] . $next:part }
  rule { $name:ident($e ...) . $next:part }
  rule { $name:ident . $next:part }
  rule { $name:ident[$e ...] }
  rule { $name:ident }
  rule { new $ctr:part }
}

export |>;


